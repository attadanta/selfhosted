- name: Install essential packages
  tags:
    - essential
  package:
    name:
      - sudo
      - gpg
      - unzip
      - ca-certificates
      - git
      - vim
      - neofetch
      - htop
      - tmux
      - stow
      - zsh
      - ripgrep
      - fzf
      - jq
    state: latest

- name: Add Docker GPG apt Key
  tags:
    - essential
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add docker Repository
  tags:
    - essential
  apt_repository:
    repo: "deb https://download.docker.com/linux/ubuntu {{ lookup('ansible.builtin.pipe', 'cat /etc/os-release | grep VERSION_CODENAME | cut -c18-') }} stable"
    state: present

- name: Install docker
  tags:
    - essential
  package:
    name:
      - docker-ce
    state: latest

- name: Disable SSH password auth
  tags:
    - essential
  ansible.builtin.lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^#PasswordAuthentication yes"
    line: "PasswordAuthentication no"
  register: sshd_config

- name: Enable passwordless sudo for "{{ username }}"
  tags:
    - essential
  lineinfile:
    dest: /etc/sudoers
    regexp: "^%wheel"
    line: "{{ username }} ALL=(ALL) NOPASSWD: ALL"
    validate: "/usr/sbin/visudo -cf %s"

- name: Change shell to zsh
  tags:
    - essential
  ansible.builtin.shell: |
    chsh -s $(which zsh) {{ username }}

- name: Create the source directory
  tags:
    - personal
  ansible.builtin.file:
    path: /home/{{ username }}/source
    state: directory
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Clone the tmux plugin manager
  tags:
    - personal
  ansible.builtin.git:
    repo: 'https://github.com/tmux-plugins/tpm'
    dest: ~/.tmux/plugins/tpm
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"

- name: Clone dotfiles
  ansible.builtin.git:
    repo: 'https://github.com/attadanta/dotfiles.git'
    dest: ~/.dotfiles
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Install neovim build dependencies
  tags:
    - personal
  package:
    name:
      - build-essential
      - cmake
      - curl
      - gettext
      - ninja-build
    state: latest

- name: Clone neovim
  tags:
    - personal
  ansible.builtin.git:
    repo: 'https://github.com/neovim/neovim.git'
    dest: /home/{{ username }}/source/neovim
    single_branch: yes
    version: v0.10.4
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"

- name: Build neovim
  tags:
    - personal
  make:
    chdir: /home/{{ username }}/source/neovim
    params:
      CMAKE_BUILD_TYPE: "Release"
  become: true

- name: Install neovim
  tags:
    - personal
  make:
    chdir: /home/{{ username }}/source/neovim
    target: install
  become: true

- name: Install fnm
  tags:
    - personal
  ansible.builtin.shell: |
    curl -fsSL https://fnm.vercel.app/install | bash
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Install node
  tags:
    - personal
  ansible.builtin.shell: |
    source .zshrc && fnm install {{ node_version }}
  args:
    chdir: /home/{{ username }}
    executable: "{{ lookup('ansible.builtin.pipe', 'which zsh') }}"
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Set default node version
  tags:
    - personal
  ansible.builtin.shell: |
    source .zshrc && fnm default {{ node_version }}
  args:
    chdir: /home/{{ username }}
    executable: "{{ lookup('ansible.builtin.pipe', 'which zsh') }}"
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Install pyenv build dependencies
  tags:
    - essential
  package:
    name:
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - libncursesw5-dev
      - xz-utils
      - tk-dev
      - libxml2-dev
      - libxmlsec1-dev
      - libffi-dev
      - liblzma-dev

- name: Install pyenv
  tags:
    - personal
  ansible.builtin.shell: |
    curl https://pyenv.run | bash
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Setup pyenv
  tags:
    - personal
  ansible.builtin.shell: |
    echo '' >> ~/.zshrc
    echo '# pyenv' >> ~/.zshrc
    echo '' >> ~/.zshrc
    echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrc
    echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrc
    echo 'eval "$(pyenv init - zsh)"' >> ~/.zshrc
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Install python
  tags:
    - personal
  ansible.builtin.shell: |
    source .zshrc && pyenv install {{ python_version }}
  args:
    chdir: /home/{{ username }}
    executable: "{{ lookup('ansible.builtin.pipe', 'which zsh') }}"
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Set default python version
  tags:
    - personal
  ansible.builtin.shell: |
    source .zshrc && pyenv global {{ python_version }}
  args:
    chdir: /home/{{ username }}
    executable: "{{ lookup('ansible.builtin.pipe', 'which zsh') }}"
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Install go
  tags:
    - personal
  ansible.builtin.shell: |
    curl -fsSL https://golang.org/dl/go{{ go_version }}.linux-amd64.tar.gz -o go{{ go_version }}.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go{{ go_version }}.linux-amd64.tar.gz
    rm go{{ go_version }}.linux-amd64.tar.gz
  become: true

- name: Install starship
  tags:
    - personal
  ansible.builtin.shell: |
    curl -sS https://starship.rs/install.sh | sh
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
  become_flags: '-i'

- name: Stow dotfiles
  tags:
    - personal
  ansible.builtin.shell: |
    stow $(ls -d */)
  args:
    chdir: /home/{{ username }}/.dotfiles
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ username }}"
